// similar to controllers inm MVC architecture frameworks
package handler

import (
	"encoding/json"
	"net/http"

	"github.com/Erick-Alen/hexagonal-architecture/adapters/dto"
	"github.com/Erick-Alen/hexagonal-architecture/application"
	"github.com/codegangsta/negroni"
	"github.com/gorilla/mux"
)

func MakeProductHandlers(r *mux.Router, n *negroni.Negroni, service application.ProductServiceInterface) {
	r.Handle("/product/{id}/enable", n.With(negroni.Wrap(enableProduct(service)))).Methods("PUT", "OPTIONS")
	r.Handle("/product/{id}/disable", n.With(negroni.Wrap(disableProduct(service)))).Methods("PUT", "OPTIONS")
	r.Handle("/product", n.With(negroni.Wrap(createProduct(service)))).Methods("POST", "OPTIONS")
	r.Handle("/product/{id}", n.With(negroni.Wrap(getProduct(service)))).Methods("GET", "OPTIONS")

	// generated by copilot
	// handler := &ProductHandler{service: service}

	// r.HandleFunc("/product", handler.CreateProduct).Methods("POST")
	// r.HandleFunc("/product/{id}", handler.GetProduct).Methods("GET")
	// r.HandleFunc("/product/{id}", handler.UpdateProduct).Methods("PUT")
	// r.HandleFunc("/product/{id}", handler.DeleteProduct).Methods("DELETE")
}

func getProduct(service application.ProductServiceInterface) http.Handler {
	// receive a service and return a http.Handler wrapping a function that receives a http.ResponseWriter and a http.Request
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		// receives all variables sent into the request
		vars := mux.Vars(r)
		id := vars["id"]

		product, err := service.Get(id)
		if err != nil {
			// http.Error(w, err.Error(), http.StatusInternalServerError)
			w.WriteHeader(http.StatusNotFound)
			return
		}
		err = json.NewEncoder(w).Encode(product)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
		// w.Write(product)
	})
}

func createProduct(service application.ProductServiceInterface) http.Handler {
	// receive a service and return a http.Handler wrapping a function that receives a http.ResponseWriter and a http.Request
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		// receives all variables sent into the request
		var productDto dto.Product
		err := json.NewDecoder(r.Body).Decode(&productDto)
		// clause guards to catch decoding errors
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			w.Write(jsonError(err.Error()))
			return
		}

		product, err := service.Create(productDto.Name, productDto.Price)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			w.Write(jsonError(err.Error()))
			return
		}
		err = json.NewEncoder(w).Encode(product)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			w.Write(jsonError(err.Error()))
			return
		}
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusOK)
	})
}

func enableProduct(service application.ProductServiceInterface) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		vars := mux.Vars(r)
		id := vars["id"]
		product, err := service.Get(id)
		if err != nil {
			w.WriteHeader(http.StatusNotFound)
			return
		}
		result, err := service.Enable(product)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			w.Write(jsonError(err.Error()))
			return
		}
		err = json.NewEncoder(w).Encode(result)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
	})
}

func disableProduct(service application.ProductServiceInterface) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		vars := mux.Vars(r)
		id := vars["id"]
		product, err := service.Get(id)
		if err != nil {
			w.WriteHeader(http.StatusNotFound)
			return
		}

		// var productDto dto.Product
		// err = json.NewDecoder(r.Body).Decode(&product)
		// if err != nil {
		// 	fmt.Println("DEU RUIM", err)
		// 	w.WriteHeader(http.StatusInternalServerError)
		// 	w.Write(jsonError(err.Error()))
		// 	return
		// }
		err = product.ChangePrice(0.0)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			w.Write(jsonError(err.Error()))
			return
		}

		result, err := service.Disable(product)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			w.Write(jsonError(err.Error()))
			return
		}
		err = json.NewEncoder(w).Encode(result)
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
	})
}
